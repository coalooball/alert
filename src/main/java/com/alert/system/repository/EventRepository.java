package com.alert.system.repository;

import com.alert.system.entity.Event;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

@Repository
public interface EventRepository extends JpaRepository<Event, UUID>, JpaSpecificationExecutor<Event> {

    Optional<Event> findBySystemCode(String systemCode);

    @Query("SELECT e FROM Event e WHERE e.correlationKey = :correlationKey AND e.status = 'OPEN'")
    Optional<Event> findByCorrelationKey(@Param("correlationKey") String correlationKey);

    List<Event> findByStatus(String status);

    @Query("SELECT e FROM Event e WHERE e.createdAt BETWEEN :startTime AND :endTime ORDER BY e.createdAt DESC")
    List<Event> findEventsInTimeWindow(@Param("startTime") LocalDateTime startTime,
                                       @Param("endTime") LocalDateTime endTime);

    @Query("SELECT e FROM Event e WHERE e.severity = :severity AND e.status = :status")
    List<Event> findBySeverityAndStatus(@Param("severity") String severity,
                                        @Param("status") String status);

    @Query("SELECT e FROM Event e WHERE e.priority = :priority AND e.status = :status")
    List<Event> findByPriorityAndStatus(@Param("priority") String priority,
                                        @Param("status") String status);

    @Query("SELECT COUNT(e) FROM Event e WHERE e.createdAt >= :startTime")
    Long countEventsAfter(@Param("startTime") LocalDateTime startTime);

    List<Event> findByIsAutoGeneratedTrueAndStatus(String status);

    @Query("SELECT e FROM Event e WHERE e.correlationRuleId = :ruleId ORDER BY e.createdAt DESC")
    List<Event> findByCorrelationRuleId(@Param("ruleId") UUID ruleId);

    long countByStatus(String status);

    long countBySeverity(String severity);

    long countByCreatedAtAfter(LocalDateTime dateTime);

    long countByIsAutoGenerated(boolean isAutoGenerated);
}