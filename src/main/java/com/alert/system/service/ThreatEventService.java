package com.alert.system.service;

import com.alert.system.entity.Event;
import com.alert.system.repository.EventRepository;
import jakarta.persistence.criteria.Predicate;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;

@Service
@RequiredArgsConstructor
public class ThreatEventService {

    private final EventRepository eventRepository;

    public Page<Event> getFilteredEvents(
            String type, String severity, String status,
            String startTime, String endTime, Pageable pageable
    ) {
        Specification<Event> spec = Specification.where(null);

        if (type != null && !type.isEmpty()) {
            spec = spec.and((root, query, cb) -> cb.equal(root.get("type"), type));
        }

        if (severity != null && !severity.isEmpty()) {
            spec = spec.and((root, query, cb) -> cb.equal(root.get("severity"), severity));
        }

        if (status != null && !status.isEmpty()) {
            spec = spec.and((root, query, cb) -> cb.equal(root.get("status"), status));
        }

        if (startTime != null && !startTime.isEmpty()) {
            LocalDateTime start = LocalDateTime.parse(startTime, DateTimeFormatter.ISO_LOCAL_DATE_TIME);
            spec = spec.and((root, query, cb) -> cb.greaterThanOrEqualTo(root.get("createdAt"), start));
        }

        if (endTime != null && !endTime.isEmpty()) {
            LocalDateTime end = LocalDateTime.parse(endTime, DateTimeFormatter.ISO_LOCAL_DATE_TIME);
            spec = spec.and((root, query, cb) -> cb.lessThanOrEqualTo(root.get("createdAt"), end));
        }

        return eventRepository.findAll(spec, pageable);
    }

    public Optional<Event> getEventById(UUID id) {
        return eventRepository.findById(id);
    }

    @Transactional
    public Event createEvent(Event event) {
        if (event.getSystemCode() == null || event.getSystemCode().isEmpty()) {
            event.setSystemCode(generateSystemCode());
        }
        if (event.getStatus() == null) {
            event.setStatus("OPEN");
        }
        if (event.getIsAutoGenerated() == null) {
            event.setIsAutoGenerated(false);
        }
        if (event.getAlertCount() == null) {
            event.setAlertCount(0);
        }
        return eventRepository.save(event);
    }

    @Transactional
    public Event updateEvent(UUID id, Event updatedEvent) {
        Optional<Event> existingEventOpt = eventRepository.findById(id);
        if (existingEventOpt.isEmpty()) {
            return null;
        }

        Event existingEvent = existingEventOpt.get();

        // Update fields
        if (updatedEvent.getName() != null) {
            existingEvent.setName(updatedEvent.getName());
        }
        if (updatedEvent.getDescription() != null) {
            existingEvent.setDescription(updatedEvent.getDescription());
        }
        if (updatedEvent.getType() != null) {
            existingEvent.setType(updatedEvent.getType());
        }
        if (updatedEvent.getAttacker() != null) {
            existingEvent.setAttacker(updatedEvent.getAttacker());
        }
        if (updatedEvent.getVictim() != null) {
            existingEvent.setVictim(updatedEvent.getVictim());
        }
        if (updatedEvent.getStartTime() != null) {
            existingEvent.setStartTime(updatedEvent.getStartTime());
        }
        if (updatedEvent.getEndTime() != null) {
            existingEvent.setEndTime(updatedEvent.getEndTime());
        }
        if (updatedEvent.getFoundTime() != null) {
            existingEvent.setFoundTime(updatedEvent.getFoundTime());
        }
        if (updatedEvent.getFirstFoundTime() != null) {
            existingEvent.setFirstFoundTime(updatedEvent.getFirstFoundTime());
        }
        if (updatedEvent.getSource() != null) {
            existingEvent.setSource(updatedEvent.getSource());
        }
        if (updatedEvent.getMitreTechniqueId() != null) {
            existingEvent.setMitreTechniqueId(updatedEvent.getMitreTechniqueId());
        }
        if (updatedEvent.getAttackList() != null) {
            existingEvent.setAttackList(updatedEvent.getAttackList());
        }
        if (updatedEvent.getAttackTool() != null) {
            existingEvent.setAttackTool(updatedEvent.getAttackTool());
        }
        if (updatedEvent.getPriority() != null) {
            existingEvent.setPriority(updatedEvent.getPriority());
        }
        if (updatedEvent.getSeverity() != null) {
            existingEvent.setSeverity(updatedEvent.getSeverity());
        }
        if (updatedEvent.getDisposeStatus() != null) {
            existingEvent.setDisposeStatus(updatedEvent.getDisposeStatus());
        }
        if (updatedEvent.getApp() != null) {
            existingEvent.setApp(updatedEvent.getApp());
        }
        if (updatedEvent.getImpactAssessment() != null) {
            existingEvent.setImpactAssessment(updatedEvent.getImpactAssessment());
        }
        if (updatedEvent.getMergeAlerts() != null) {
            existingEvent.setMergeAlerts(updatedEvent.getMergeAlerts());
        }
        if (updatedEvent.getThreatActors() != null) {
            existingEvent.setThreatActors(updatedEvent.getThreatActors());
        }
        if (updatedEvent.getOrganizations() != null) {
            existingEvent.setOrganizations(updatedEvent.getOrganizations());
        }
        if (updatedEvent.getStatus() != null) {
            existingEvent.setStatus(updatedEvent.getStatus());
        }
        if (updatedEvent.getConfidenceScore() != null) {
            existingEvent.setConfidenceScore(updatedEvent.getConfidenceScore());
        }
        if (updatedEvent.getRiskScore() != null) {
            existingEvent.setRiskScore(updatedEvent.getRiskScore());
        }

        // Update asset lists
        if (updatedEvent.getAttackAssetIps() != null) {
            existingEvent.setAttackAssetIps(updatedEvent.getAttackAssetIps());
        }
        if (updatedEvent.getVictimAssetIps() != null) {
            existingEvent.setVictimAssetIps(updatedEvent.getVictimAssetIps());
        }
        if (updatedEvent.getAttackAssetIpPorts() != null) {
            existingEvent.setAttackAssetIpPorts(updatedEvent.getAttackAssetIpPorts());
        }
        if (updatedEvent.getVictimAssetIpPorts() != null) {
            existingEvent.setVictimAssetIpPorts(updatedEvent.getVictimAssetIpPorts());
        }
        if (updatedEvent.getAttackAssetDomains() != null) {
            existingEvent.setAttackAssetDomains(updatedEvent.getAttackAssetDomains());
        }
        if (updatedEvent.getVictimAssetDomains() != null) {
            existingEvent.setVictimAssetDomains(updatedEvent.getVictimAssetDomains());
        }
        if (updatedEvent.getAttackUrls() != null) {
            existingEvent.setAttackUrls(updatedEvent.getAttackUrls());
        }
        if (updatedEvent.getVictimUrls() != null) {
            existingEvent.setVictimUrls(updatedEvent.getVictimUrls());
        }
        if (updatedEvent.getAttackMalwares() != null) {
            existingEvent.setAttackMalwares(updatedEvent.getAttackMalwares());
        }
        if (updatedEvent.getAttackMalwareSamples() != null) {
            existingEvent.setAttackMalwareSamples(updatedEvent.getAttackMalwareSamples());
        }
        if (updatedEvent.getAttackMalwareSampleFamilies() != null) {
            existingEvent.setAttackMalwareSampleFamilies(updatedEvent.getAttackMalwareSampleFamilies());
        }
        if (updatedEvent.getAttackEmailAddresses() != null) {
            existingEvent.setAttackEmailAddresses(updatedEvent.getAttackEmailAddresses());
        }
        if (updatedEvent.getVictimEmailAddresses() != null) {
            existingEvent.setVictimEmailAddresses(updatedEvent.getVictimEmailAddresses());
        }
        if (updatedEvent.getAttackEmails() != null) {
            existingEvent.setAttackEmails(updatedEvent.getAttackEmails());
        }
        if (updatedEvent.getVictimEmails() != null) {
            existingEvent.setVictimEmails(updatedEvent.getVictimEmails());
        }
        if (updatedEvent.getAttackSoftwares() != null) {
            existingEvent.setAttackSoftwares(updatedEvent.getAttackSoftwares());
        }
        if (updatedEvent.getVictimSoftwares() != null) {
            existingEvent.setVictimSoftwares(updatedEvent.getVictimSoftwares());
        }
        if (updatedEvent.getAttackVulnerabilities() != null) {
            existingEvent.setAttackVulnerabilities(updatedEvent.getAttackVulnerabilities());
        }
        if (updatedEvent.getAttackCertificates() != null) {
            existingEvent.setAttackCertificates(updatedEvent.getAttackCertificates());
        }
        if (updatedEvent.getVictimCertificates() != null) {
            existingEvent.setVictimCertificates(updatedEvent.getVictimCertificates());
        }

        return eventRepository.save(existingEvent);
    }

    @Transactional
    public boolean deleteEvent(UUID id) {
        if (eventRepository.existsById(id)) {
            eventRepository.deleteById(id);
            return true;
        }
        return false;
    }

    @Transactional
    public int batchDeleteEvents(List<UUID> ids) {
        int count = 0;
        for (UUID id : ids) {
            if (deleteEvent(id)) {
                count++;
            }
        }
        return count;
    }

    @Transactional
    public int batchUpdateStatus(List<UUID> ids, String status) {
        int count = 0;
        for (UUID id : ids) {
            Optional<Event> eventOpt = eventRepository.findById(id);
            if (eventOpt.isPresent()) {
                Event event = eventOpt.get();
                event.setStatus(status);
                eventRepository.save(event);
                count++;
            }
        }
        return count;
    }

    public Map<String, Object> getStatistics() {
        Map<String, Object> stats = new HashMap<>();

        // Total events
        long totalEvents = eventRepository.count();
        stats.put("totalEvents", totalEvents);

        // Events by status
        long openEvents = eventRepository.countByStatus("OPEN");
        long inProgressEvents = eventRepository.countByStatus("IN_PROGRESS");
        long resolvedEvents = eventRepository.countByStatus("RESOLVED");
        long closedEvents = eventRepository.countByStatus("CLOSED");

        stats.put("openEvents", openEvents);
        stats.put("inProgressEvents", inProgressEvents);
        stats.put("resolvedEvents", resolvedEvents);
        stats.put("closedEvents", closedEvents);

        // Events by severity
        long criticalEvents = eventRepository.countBySeverity("CRITICAL");
        long highEvents = eventRepository.countBySeverity("HIGH");
        long mediumEvents = eventRepository.countBySeverity("MEDIUM");
        long lowEvents = eventRepository.countBySeverity("LOW");

        stats.put("criticalEvents", criticalEvents);
        stats.put("highEvents", highEvents);
        stats.put("mediumEvents", mediumEvents);
        stats.put("lowEvents", lowEvents);

        // Recent events (last 24 hours)
        LocalDateTime yesterday = LocalDateTime.now().minusDays(1);
        long recentEvents = eventRepository.countByCreatedAtAfter(yesterday);
        stats.put("recentEvents", recentEvents);

        // Auto-generated vs manual
        long autoGeneratedEvents = eventRepository.countByIsAutoGenerated(true);
        long manualEvents = eventRepository.countByIsAutoGenerated(false);

        stats.put("autoGeneratedEvents", autoGeneratedEvents);
        stats.put("manualEvents", manualEvents);

        return stats;
    }

    private String generateSystemCode() {
        return String.format("EVT-%s-%s",
            LocalDateTime.now().toString().replace("-", "").replace(":", "").replace(".", "").substring(0, 14),
            UUID.randomUUID().toString().substring(0, 8).toUpperCase());
    }
}